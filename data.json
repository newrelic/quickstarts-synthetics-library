{"quickstarts":[{"name":"2FAOrMFA","description":"Use the otpauth node module to create a time based one time password for Google Authenticator and Okta based 2FA/MFA.  This module is available on public and private locations when using the Chrome 100, Node 16.10.0, or newer runtimes. \n","authors":["Brian P."],"type":"Snippet","monitorType":"SCRIPT_BROWSER","script":"","id":"2FAOrMFA"},{"name":"Check s3 Object","description":"Boilerplate script that checks the size of an Object in s3 against a given value. This can be expanded to verify any metadata of an s3 object and with a little work the file structure of the object etc. Veryuseful in ETL pipelines.\n","authors":["Adam M","Steve C"],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"AWS"},{"name":"AzureOAUTH2","description":"An example of authenticating against Azure using an application registration with client secret authentication configured. This example retrieves a value from Azure Key Vault, but similar authentication could be used to access Microsoft Graph and other Azure based resources instead. This would require modifications to the scope value in the getToken function. Creating the Azure application registration and setting permissions is outside of the scope of this example. The Azure tenant, client id / application id, and client secret should be stored as Secure Credentials.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"AzureOAUTH2"},{"name":"Blocklist","description":"Script to check the presence of a list of IP addresses against a set of email blocklists. The script will fail if any IP address is found in one of the lists.\n","authors":["Samuel Vandamme"],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"Blocklist"},{"name":"Broken Link Checker","description":"Check all hyperlinks on a page for broken links\n","authors":["Phil W."],"type":"Template","monitorType":"SCRIPT_BROWSER","script":"","id":"BrokenLinkChecker"},{"name":"BrowserJSON","description":"How to find the element associated with JSON in a scripted browser monitor and parse the JSON. Although this is a complete script, typically this would be used as a snippet or portion of a larger monitor instead.\n","authors":["Brian P."],"type":"Snippet","monitorType":"SCRIPT_BROWSER","script":"","id":"BrowserJSON"},{"name":"CertificateDateValidation","description":"The synthetic script can be used to validate an SSL or TLS certificate's date. When configured, the script will call a URL endpoint and get the Peer Certificate. The certificate can then be analyzed for its expiration date and compared with an offset of a specified amount of days to trigger a check failure to ensure than the endpoints get updated when required.\n","authors":["Brian Rogers"],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"CertificateDateValidation"},{"name":"DNS","description":"A scripted API monitor that asynchronously executes multiple DNS lookups against a DNS server.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"DNS"},{"name":"DaylightSavingsTimestamps","description":"Dates in Synthetics are based on UTC by default, but sometimes you have a requirement for a timezone based date. Daylight Savings makes this more challenging.  This snippet creates a Date object using a variable offset based on whether or not US based Daylight Savings is active. This script was created for Eastern Standard Time / Eastern Daylight Time. Adjust the offsets in getOffset for other time zones.\n","authors":["Paul B."],"type":"Snippet","monitorType":"SCRIPT_API","script":"","id":"DaylightSavingsTimestamps"},{"name":"FTP","description":"Use the basic-ftp module to connect to a FTP server using a password stored in a Secure Credential, list the current directory contents, and close the connection. This can be extended to upload/download files, etc.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"FTP"},{"name":"FileDownload","description":"Download a file and measure the time it takes to complete.\n","authors":["Keagan P."],"type":"Template","monitorType":"SCRIPT_BROWSER","script":"","id":"FileDownload"},{"name":"FrameSwitching","description":"A small snippet showing the recommended method to switch to a frame. Frames within frames require switching a single level at a time. Use $driver.switchTo().defaultContent() to switch back to the main / parent frame if needed.\n","authors":["Brian P."],"type":"Snippet","monitorType":"SCRIPT_BROWSER","script":"","id":"FrameSwitching"},{"name":"GCPServiceAccountOAUTH","description":"Interact with GCP APIs using a service account and JWT authorization (https://developers.google.com/identity/protocols/oauth2/service-account#httprest) This simple example uses the App Engine API to retrieve information about an application. The scope and API endpoints can be adjusted to interact with other GCP APIs.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"GCPServiceAccountOAUTH"},{"name":"Google PageSpeed Insights - Lighthouse","description":"Gets a Google Lighthouse Audit report using the PageSpeed Insights API and stores the results, for analysis. Use cases include comparing this data with Real User Monitoring (RUM) data, monitoring Core Web Vitals and Lighthouse scores. You need to create a secure credential called PAGESPEED_INSIGHTS_API_KEY. More info on that here: https://docs.newrelic.com/docs/synthetics/synthetic-monitoring/using-monitors/store-secure-credentials-scripted-browsers-api-tests/\nYou can get a PageSpeed Insights API key from Google here:\n  https://developers.google.com/speed/docs/insights/v5/get-started\n\nYou will also need to replace the URL to the page you want to check. Current it is checking google.com by default.\n","authors":["Dan Perovich","Daniel Fitzgerald"],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"GoogleLighthouse"},{"name":"Google Search Console API","description":"Query Google Search Console analytics from the Google Search Console API and ingest to New Relic. Use cases include: - seeing where your site ranks when users search Google for a specific term - seeing the impressions, clicks, position, and click-through rate for pages You will need two secure credentials: - GSC_INSERT_LICENSE_API_KEY, a New Relic ingest license key - GCP_SERVICEACCOUNT_KEY, the private key of a Google Service Account with\n  read/restricted access \nFrom Google, you will also require: - Appropriate access to the property (site/domain) in Google Search Console\n  (https://search.google.com/search-console/)\n- A Google Cloud project, created in the Google Developer Console\n  (https://console.developers.google.com/)\n- Google Search Console API must be enabled for the project\n  (https://cloud.google.com/endpoints/docs/openapi/enable-api)\n- A service account for Authentication, as detailed in the GoogleServiceAccountOUATH\n  quickstart\n  (https://developers.google.com/identity/protocols/oauth2/service-account#httprest)\n  Alternatively you can use OAuth 2.0 Client IDs, not included in the example script\n","authors":["Craig S."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"GoogleSearchConsole"},{"name":"ICMP","description":"Use the net-ping module to use ICMP to asyncrhonously ping multiple IP addresses.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"ICMP"},{"name":"LDAP","description":"Connect to a LDAP server using a password stored as a Secure Credential then test authentication as a different user.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"LDAP"},{"name":"MQTT","description":"Connect to a MQTT server, subscribe to a topic, publish a message, and log out the message.  Asserts could be added to validate the content of the message.  Requires the use of a private location with a custom node module configuration to make the mqtt module available in the monitor.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"MQTT"},{"name":"MutualAuthAPI","description":"Mutual authentication for SOAP or REST APIs using a scripted API monitor. Include a certificate and private key with the request configuration for cert based authentication. This script will not pass in its current form and is simply a template.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"MutualAuthAPI"},{"name":"NRDBCustomEvent","description":"Have you always wanted to send custom data about your Synthetic Monitor to NRDB? Now you can. Create your JSON payload and use zlib.gzip to prepare the payload body.\n","authors":["Stacy S."],"type":"Snippet","monitorType":"SCRIPT_API","script":"","id":"NRDBCustomEvent"},{"name":"NRQLCompareWith","description":"Execute a NRQL query through NerdGraph to compare results over a period in time. The script will fail if the current result decreases from the previous result more than a given threshold (thresPercent).  The query and comparison windows are defined as variables to make adjustments easier. The query result logic in the callback function may need adjusted if NRQL functions other than count are used.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"NRQLCompareWith"},{"name":"PDFContentVerification","description":"This requires the use of a containerized private minion and the addition of the pdf-parse Node module. Download a PDF and confirm it contains a specific string.\n","authors":["Scott D."],"type":"Template","monitorType":"SCRIPT_BROWSER","script":"","id":"PDFContentVerification"},{"name":"QueryEventAPI","description":"Query the New Relic Event API during script execution. This example uses $util.insights.set to store a value from one monitor execution  that will be queried and used in future monitor executions. An Insights query key (https://docs.newrelic.com/docs/apis/get-started/intro-apis/new-relic-api-keys#insights-query-key) was created and stored in a Secure Credential to query the Event API. This could be used in a scripted browser or scripted API monitor.\n","authors":["Brian P."],"type":"Snippet","monitorType":"SCRIPT_API","script":"","id":"QueryEventAPI"},{"name":"SAML Metadata Certificate Validation","description":"A script to validate the X509 Certificate data in SAML metadata and confirm that it is not expiring soon. The SAML Metadata structure allows some variance in field names and namespaces, so this script strips namespaces and attempts to find a list of entities in either location. SAML Metadata requirements are documented here: https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf This script uses parts of the Cert Check script found here: https://forum.newrelic.com/s/hubtopic/aAX8W0000008ZtLWAU/relic-solution-monitoring-ssl-certificate-expiration Requires a target URL.\n","authors":["Shevaun F."],"type":"Template","monitorType":"SCRIPTED_API","script":"","id":"SAMLMetadataCertificateValidation"},{"name":"SFTP","description":"Uses the ssh2-sftp-client module to connect to a SFTP server using a Secure Credential,  delete any previous copies of the test file, upload the test file, download the test file, and then delete the test file.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"SFTP"},{"name":"SMTP","description":"Use the nodemailer module to send an email. This example uses Gmail and an Gmail application password stored in a Secure Credential.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"SMTP"},{"name":"SaveScreenshotsToS3","description":"Save screenshots of each step within a scripted browser monitor to AWS S3 bucket.\n","authors":["Keagan P."],"type":"Template","monitorType":"SCRIPT_BROWSER","script":"","id":"SaveScreenshotsToS3"},{"name":"TCPPortCheck","description":"Connect to a non SSL TCP port, report the connection time as a custom attribute, and fail if the connection took longer than X milliseconds. For a secure port, please use TCPSecurePortCheck. For connections that require input, use TCPRequestResponse or TCPSecureRequestResponse.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"TCPPortCheck"},{"name":"TCPRequestResponse","description":"Connect to a non-SSL TCP port and simulate a HTTP GET. HTTP is not required and just used as an example. Use TCPPortCheck if the client does not need to write to the connection. Use TCPSecureRequestResponse if a secure port is required.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"TCPRequestResponse"},{"name":"TCPSecurePortCheck","description":"Connect to a secure (SSL/TLS) TCP port, report the connection time as a custom attribute, and fail if the connection took longer than X milliseconds. For a non secure (SSL/TLS) port, please use TCPPortCheck. For connections that require input, use TCPRequestResponse or TCPSecureRequestResponse.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"TCPSecurePortCheck"},{"name":"TCPSecureRequestResponse","description":"Connect to a secure TCP port and simulate a HTTP GET. HTTP is not required and just used as an example. Use TCPPortCheck if the client does not need to write to the connection. Use TCPRequestResponse if a secure port is not required.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"TCPSecureRequestResponse"},{"name":"TabOrWindowSwitching","description":"Always use a hard coded sleep between the click / action that triggers a new window or tab to open and attempting to switch to the new tab.  Monitors may receive intermittent errors due to trying to switch to the new tab before it exists without this sleep.\n","authors":["Brian P."],"type":"Snippet","monitorType":"SCRIPT_BROWSER","script":"","id":"TabOrWindowSwitching"},{"name":"Websocket","description":"Test a websocket connection using the ws module that is available in the scripted API runtime.\n","authors":["Brian P."],"type":"Template","monitorType":"SCRIPT_API","script":"","id":"Websocket"}]}